@model IEnumerable<Cartitem>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_User.cshtml";
}

@section breadcum {
    <section class="breadcrumb-section set-bg" data-setbg="img/breadcrumb.jpg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Shopping Cart</h2>
                        <div class="breadcrumb__option">
                            <a href="./index.html">Home</a>
                            <span>Shopping Cart</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<section class="shoping-cart spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="shoping__cart__table">
                    <table>
                        <thead>
                            <tr>
                                <th class="shoping__product">Products</th>
                                <th>Price</th>
                                <th>Discount (%)</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr data-id="@item.Masanpham">
                                    <td class="shoping__cart__item">
                                        <img src="~/Hinh/SanPham/@item.Hinh" alt="Hình">
                                    </td>
                                    <td class="shoping__cart__price" data-price="@item.Giagoc">
                                        @item.Giagoc.ToString("C")
                                    </td>
                                    <td class="shoping__cart__discount" data-discount="@item.Discount">
                                        @item.Discount %
                                    </td>
                                    <td class="shoping__cart__quantity">
                                        <div class="quantity">
                                            <input type="number" value="@item.Soluong" min="1" class="quantity-input" data-id="@item.Masanpham">
                                        </div>
                                    </td>
                                    <td class="shoping__cart__total" id="total-@item.Masanpham">
                                        @item.Thanhtien.ToString("C")
                                    </td>
                                    <td class="shoping__cart__item__close">
                                        <span class="icon_close"></span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="shoping__cart__total">
                    <h5>
                        Total:
                        @{
                            decimal totalBeforeDiscount = Model.Sum(item => (decimal)item.Giagoc);
                        }
                        @totalBeforeDiscount.ToString("C")
                    </h5>
                    <h5>
                        Total After Discount:
                        @{
                            decimal totalAfterDiscount = Model.Sum(item => (decimal)item.Giasaugiam);
                        }
                        @totalAfterDiscount.ToString("C")
                    </h5>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts {
    <script>
        // Lưu số lượng vào Local Storage
        function saveToLocalStorage() {
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const cartData = {};

            quantityInputs.forEach(input => {
                const productId = input.getAttribute('data-id');
                const quantity = input.value;
                cartData[productId] = quantity; // Lưu số lượng theo ID sản phẩm
            });

            localStorage.setItem('cartData', JSON.stringify(cartData)); // Lưu vào Local Storage
        }

        // Tải số lượng từ Local Storage
        function loadFromLocalStorage() {
            const cartData = JSON.parse(localStorage.getItem('cartData'));

            if (cartData) {
                Object.keys(cartData).forEach(productId => {
                    const input = document.querySelector(`.quantity-input[data-id='${productId}']`);
                    if (input) {
                        input.value = cartData[productId]; // Khôi phục số lượng
                    }
                });
            }
        }

        // Cập nhật tổng số lượng và tổng giá trị
        function updateTotal() {
            let grandTotalAfterDiscount = 0;
            let grandTotalBeforeDiscount = 0;
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const price = parseFloat(row.querySelector('.shoping__cart__price').dataset.price);
                const discount = parseFloat(row.querySelector('.shoping__cart__discount').dataset.discount) / 100;
                const quantity = parseInt(row.querySelector('.quantity-input').value);

                // Tính tổng giá gốc
                const totalBeforeDiscount = price * quantity;
                grandTotalBeforeDiscount += totalBeforeDiscount;

                // Tính tổng sau giảm giá
                const totalAfterDiscount = totalBeforeDiscount * (1 - discount);
                grandTotalAfterDiscount += totalAfterDiscount;

                // Cập nhật tổng cho mỗi dòng
                row.querySelector('.shoping__cart__total').innerText = totalAfterDiscount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
            });

            // Cập nhật tổng giỏ hàng
            document.querySelector('.shoping__cart__total h5:first-child').innerText = 'Total: ' + grandTotalBeforeDiscount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
            document.querySelector('.shoping__cart__total h5:last-child').innerText = 'Total After Discount: ' + grandTotalAfterDiscount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
        }

        document.addEventListener("DOMContentLoaded", function () {
            loadFromLocalStorage(); // Tải dữ liệu từ Local Storage khi trang được tải

            const quantityInputs = document.querySelectorAll('.quantity-input');
            quantityInputs.forEach(input => {
                input.addEventListener('change', function () {
                    saveToLocalStorage(); // Lưu số lượng vào Local Storage khi thay đổi
                    updateTotal(); // Cập nhật tổng
                });
            });

            updateTotal(); // Cập nhật tổng khi tải trang
        });
    </script>
}
